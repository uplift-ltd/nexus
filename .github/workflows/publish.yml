name: publish

on:
  workflow_dispatch:
    inputs:
      distTag:
        type: choice
        description: "distTag"
        default: latest
        options:
          - latest
          - prerelease
      graduate:
        type: boolean
        description: "graduate (true or false)"
        default: false

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js with GitHub Packages
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node
        env:
          cache-name: npm-cache
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{runner.os}}-build-${{env.cache-name}}-${{hashFiles('**/package-lock.json')}}-${{hashFiles('packages/*/package.json')}}

      # Always run this, so it throws if the package and lockfile don't match
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js with GitHub Packages
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Restore dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-cache
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{runner.os}}-build-${{env.cache-name}}-${{hashFiles('**/package-lock.json')}}-${{hashFiles('packages/*/package.json')}}

      - run: npm run build

      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            ./packages/*/cjs/*
            ./packages/*/esm/*
          retention-days: 1

  publish:
    environment:
      name: Production
      url: "https://${{ steps.get-url.outputs.url }}"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          token: ${{ secrets.PUBLISH_TOKEN }}

      - name: Use Node.js with GitHub Packages
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Restore dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-cache
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{runner.os}}-build-${{env.cache-name}}-${{hashFiles('**/package-lock.json')}}-${{hashFiles('packages/*/package.json')}}

      - uses: actions/download-artifact@v3
        with:
          name: build
          path: packages/

      - name: Configure git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Lerna version
        if:
          (github.event.inputs.distTag == 'latest' && github.ref == 'refs/heads/main') ||
          github.event.inputs.distTag == 'prerelease'
        run: |
          if [ "${{ github.event.inputs.distTag }}" == "latest" ]; then
            if [ "${{ github.event.inputs.graduate }}" == "true" ]; then
              npx lerna version --yes --create-release github --conventional-graduate
            else
              npx lerna version --yes --create-release github
            fi
          elif [ "${{ github.event.inputs.distTag }}" == "prerelease" ]; then
            npx lerna version --yes --conventional-prerelease
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lerna publish npm
        run:
          npx lerna publish from-package --yes --dist-tag ${{ github.event.inputs.distTag }}
          --registry https://registry.npmjs.org
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Use ghp registry
        uses: actions/setup-node@v3
        with:
          registry-url: "https://npm.pkg.github.com"

      - name: Lerna publish ghp
        run:
          npx lerna publish from-package --yes --dist-tag ${{ github.event.inputs.distTag }}
          --registry https://npm.pkg.github.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
