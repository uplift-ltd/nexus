import { dirname } from "path";
import fs from "fs";
import { globby } from "globby";
import path from "path";
import _ from "lodash";
import { fileURLToPath } from "url";

(async () => {
  const __dirname = dirname(fileURLToPath(import.meta.url));

  await fs.promises.rm(path.resolve(__dirname, `../docs/packages`), {
    recursive: true,
    force: true,
  });
  await fs.promises.mkdir(path.resolve(__dirname, `../docs/packages`), { recursive: true });

  const readmePaths = (await globby(path.resolve(__dirname, "../../packages/*/README.md"))).sort();
  const packageJsonPaths = readmePaths.map((readmePath) =>
    readmePath.replace("README.md", "package.json")
  );
  const faqPaths = (await globby(path.resolve(__dirname, "../docs/faq/*.md"))).sort();

  const packages = await Promise.all(
    readmePaths.map(async (readmePath, i) => {
      const readme = await fs.promises.readFile(readmePath, "utf-8");
      const packageJsonPath = packageJsonPaths[i];
      const pkg = JSON.parse(await fs.promises.readFile(packageJsonPath, "utf-8"));
      const name = pkg.name.replace("@uplift-ltd/", "");
      const filename = _.kebabCase(name);

      await fs.promises.writeFile(
        path.resolve(__dirname, `../docs/packages/${filename}.md`),
        `---\ntitle: ${name}\n---\n\n` + readme.split("\n").slice(2).join("\n")
      );

      return {
        name,
        filename,
      };
    })
  );

  const faqs = faqPaths.map((faqPath) => ({
    filename: path.basename(faqPath, ".md"),
  }));

  const sidebars = {
    sidebar: {
      "Getting Started": ["getting-started/installation", "getting-started/contributing"],
      FAQ: faqs.map(({ filename }) => `faq/${filename}`),
      Packages: packages.map(({ filename }) => `packages/${filename}`),
    },
  };

  await fs.promises.writeFile(
    path.resolve(__dirname, "../sidebars.js"),
    [
      "// This file is generated by scripts/update-docs.js",
      `module.exports = ${JSON.stringify(sidebars, null, 2)}`,
    ].join("\n")
  );
})();
